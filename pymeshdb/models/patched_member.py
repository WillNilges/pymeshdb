# coding: utf-8

"""
    MeshDB Data API

    Programmatic access to mesh core data, detailing our installs, members, etc.   To use an authorization token, use the \"Authorize\" button, and under \"tokenAuth\" enter `Token ` before the content of your token, like this: `Token xxxyyyyyzzz`  If you have username/password credentials (like those used on the admin UI) you can login via the admin UI or [DRF login page](/auth/login/?next=/api-docs/swagger/)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class PatchedMember(BaseModel):
    """
    PatchedMember
    """ # noqa: E501
    id: Optional[StrictInt] = None
    all_email_addresses: Optional[List[StrictStr]] = None
    installs: Optional[List[StrictInt]] = None
    name: Optional[StrictStr] = Field(default=None, description="Member full name in the format: \"First Last\"")
    primary_email_address: Optional[Annotated[str, Field(strict=True, max_length=254)]] = Field(default=None, description="Primary email address used to contact the member")
    stripe_email_address: Optional[Annotated[str, Field(strict=True, max_length=254)]] = Field(default=None, description="Email address used by the member to donate via Stripe, if different to their primary email")
    additional_email_addresses: Optional[List[Annotated[str, Field(strict=True, max_length=254)]]] = Field(default=None, description="Any additional email addresses associated with this member")
    phone_number: Optional[StrictStr] = Field(default=None, description="A contact phone number for this member")
    slack_handle: Optional[StrictStr] = Field(default=None, description="The member's slack handle")
    notes: Optional[StrictStr] = Field(default=None, description="A free-form text description of how to contact this member, to track any additional information. For Members imported from the spreadsheet, this starts with a formatted block of information about the import process and original spreadsheet data. However this structure can be changed by admins at any time and should not be relied on by automated systems. ")
    __properties: ClassVar[List[str]] = ["id", "all_email_addresses", "installs", "name", "primary_email_address", "stripe_email_address", "additional_email_addresses", "phone_number", "slack_handle", "notes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PatchedMember from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "id",
            "all_email_addresses",
            "installs",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if primary_email_address (nullable) is None
        # and model_fields_set contains the field
        if self.primary_email_address is None and "primary_email_address" in self.model_fields_set:
            _dict['primary_email_address'] = None

        # set to None if stripe_email_address (nullable) is None
        # and model_fields_set contains the field
        if self.stripe_email_address is None and "stripe_email_address" in self.model_fields_set:
            _dict['stripe_email_address'] = None

        # set to None if additional_email_addresses (nullable) is None
        # and model_fields_set contains the field
        if self.additional_email_addresses is None and "additional_email_addresses" in self.model_fields_set:
            _dict['additional_email_addresses'] = None

        # set to None if phone_number (nullable) is None
        # and model_fields_set contains the field
        if self.phone_number is None and "phone_number" in self.model_fields_set:
            _dict['phone_number'] = None

        # set to None if slack_handle (nullable) is None
        # and model_fields_set contains the field
        if self.slack_handle is None and "slack_handle" in self.model_fields_set:
            _dict['slack_handle'] = None

        # set to None if notes (nullable) is None
        # and model_fields_set contains the field
        if self.notes is None and "notes" in self.model_fields_set:
            _dict['notes'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PatchedMember from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "all_email_addresses": obj.get("all_email_addresses"),
            "installs": obj.get("installs"),
            "name": obj.get("name"),
            "primary_email_address": obj.get("primary_email_address"),
            "stripe_email_address": obj.get("stripe_email_address"),
            "additional_email_addresses": obj.get("additional_email_addresses"),
            "phone_number": obj.get("phone_number"),
            "slack_handle": obj.get("slack_handle"),
            "notes": obj.get("notes")
        })
        return _obj


