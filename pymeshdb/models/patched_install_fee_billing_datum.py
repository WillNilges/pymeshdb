# coding: utf-8

"""
    MeshDB Data API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from pymeshdb.models.install_fee_billing_datum_install import InstallFeeBillingDatumInstall
from pymeshdb.models.install_fee_billing_datum_status_enum import InstallFeeBillingDatumStatusEnum
from typing import Optional, Set
from typing_extensions import Self

class PatchedInstallFeeBillingDatum(BaseModel):
    """
    A  ModelSerializer MixIn which sets `NestedKeyObjectRelatedField` as the default field class to use for the foreign key fields
    """ # noqa: E501
    id: Optional[StrictStr] = None
    status: Optional[InstallFeeBillingDatumStatusEnum] = Field(default=None, description="The billing status of the associated install  * `ToBeBilled` - To Be Billed * `Billed` - Billed * `NotBillingDuplicate` - Not Billing - Duplicate * `NotBillingOther` - Not Billing - Other")
    billing_date: Optional[date] = Field(default=None, description="The date that the associated install was billed to the responsible organization")
    invoice_number: Optional[StrictStr] = Field(default=None, description="The invoice number that the associated install was billed via")
    notes: Optional[StrictStr] = Field(default=None, description="A free-form text description, to track any additional information.")
    install: Optional[InstallFeeBillingDatumInstall] = None
    __properties: ClassVar[List[str]] = ["id", "status", "billing_date", "invoice_number", "notes", "install"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PatchedInstallFeeBillingDatum from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of install
        if self.install:
            _dict['install'] = self.install.to_dict()
        # set to None if billing_date (nullable) is None
        # and model_fields_set contains the field
        if self.billing_date is None and "billing_date" in self.model_fields_set:
            _dict['billing_date'] = None

        # set to None if invoice_number (nullable) is None
        # and model_fields_set contains the field
        if self.invoice_number is None and "invoice_number" in self.model_fields_set:
            _dict['invoice_number'] = None

        # set to None if notes (nullable) is None
        # and model_fields_set contains the field
        if self.notes is None and "notes" in self.model_fields_set:
            _dict['notes'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PatchedInstallFeeBillingDatum from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "status": obj.get("status"),
            "billing_date": obj.get("billing_date"),
            "invoice_number": obj.get("invoice_number"),
            "notes": obj.get("notes"),
            "install": InstallFeeBillingDatumInstall.from_dict(obj["install"]) if obj.get("install") is not None else None
        })
        return _obj


