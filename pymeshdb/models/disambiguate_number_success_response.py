# coding: utf-8

"""
    MeshDB Data API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List
from pymeshdb.models.disambiguate_number_success_response_resolved_node import DisambiguateNumberSuccessResponseResolvedNode
from pymeshdb.models.disambiguate_number_supporting_data import DisambiguateNumberSupportingData
from typing import Optional, Set
from typing_extensions import Self

class DisambiguateNumberSuccessResponse(BaseModel):
    """
    DisambiguateNumberSuccessResponse
    """ # noqa: E501
    resolved_node: DisambiguateNumberSuccessResponseResolvedNode
    supporting_data: DisambiguateNumberSupportingData
    __properties: ClassVar[List[str]] = ["resolved_node", "supporting_data"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DisambiguateNumberSuccessResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of resolved_node
        if self.resolved_node:
            _dict['resolved_node'] = self.resolved_node.to_dict()
        # override the default output from pydantic by calling `to_dict()` of supporting_data
        if self.supporting_data:
            _dict['supporting_data'] = self.supporting_data.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DisambiguateNumberSuccessResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "resolved_node": DisambiguateNumberSuccessResponseResolvedNode.from_dict(obj["resolved_node"]) if obj.get("resolved_node") is not None else None,
            "supporting_data": DisambiguateNumberSupportingData.from_dict(obj["supporting_data"]) if obj.get("supporting_data") is not None else None
        })
        return _obj


