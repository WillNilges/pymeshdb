# coding: utf-8

"""
    MeshDB Data API

    Programmatic access to mesh core data, detailing our installs, members, etc.   To use an authorization token, use the \"Authorize\" button, and under \"tokenAuth\" enter `Token ` before the content of your token, like this: `Token xxxyyyyyzzz`  If you have username/password credentials (like those used on the admin UI) you can login via the admin UI or [DRF login page](/auth/login/?next=/api-docs/swagger/)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from pymeshdb.models.node_status_enum import NodeStatusEnum
from pymeshdb.models.node_type_enum import NodeTypeEnum
from typing import Optional, Set
from typing_extensions import Self

class Node(BaseModel):
    """
    Node
    """ # noqa: E501
    network_number: StrictInt
    buildings: List[StrictInt]
    devices: List[StrictInt]
    name: Optional[StrictStr] = Field(default=None, description="The colloquial name of this node used among mesh volunteers, if applicable")
    status: NodeStatusEnum = Field(description="The current status of this Node  * `Inactive` - Inactive * `Active` - Active * `Planned` - Planned")
    type: Optional[NodeTypeEnum] = Field(default=None, description="The type of node this is, controls the icon used on the network map  * `Standard` - Standard * `Hub` - Hub * `Supernode` - Supernode * `POP` - Pop * `AP` - Ap * `Remote` - Remote")
    latitude: Union[StrictFloat, StrictInt] = Field(description="Approximate Node latitude in decimal degrees (this will match one of the attached Building objects in most cases, but has been manually moved around in some cases to more accurately reflect node location)")
    longitude: Union[StrictFloat, StrictInt] = Field(description="Approximate Node longitude in decimal degrees (this will match one of the attached Building objects in most cases, but has been manually moved around in some cases to more accurately reflect node location)")
    altitude: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Approximate Node altitude in \"absolute\" meters above mean sea level (this will match one of the attached Building objects in most cases, but has been manually moved around in some cases to more accurately reflect node location)")
    install_date: Optional[date] = Field(default=None, description="The date the first Install or Device associated with this Node became active on the mesh")
    abandon_date: Optional[date] = Field(default=None, description="The date the last Install or Device associated with this Node was abandoned, unplugged, or removed from service")
    notes: Optional[StrictStr] = Field(default=None, description="A free-form text description of this Node, to track any additional information. For Nodes imported from the spreadsheet, this starts with a formatted block of information about the import process and original spreadsheet data. However this structure can be changed by admins at any time and should not be relied on by automated systems. ")
    __properties: ClassVar[List[str]] = ["network_number", "buildings", "devices", "name", "status", "type", "latitude", "longitude", "altitude", "install_date", "abandon_date", "notes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Node from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "network_number",
            "buildings",
            "devices",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if altitude (nullable) is None
        # and model_fields_set contains the field
        if self.altitude is None and "altitude" in self.model_fields_set:
            _dict['altitude'] = None

        # set to None if install_date (nullable) is None
        # and model_fields_set contains the field
        if self.install_date is None and "install_date" in self.model_fields_set:
            _dict['install_date'] = None

        # set to None if abandon_date (nullable) is None
        # and model_fields_set contains the field
        if self.abandon_date is None and "abandon_date" in self.model_fields_set:
            _dict['abandon_date'] = None

        # set to None if notes (nullable) is None
        # and model_fields_set contains the field
        if self.notes is None and "notes" in self.model_fields_set:
            _dict['notes'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Node from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "network_number": obj.get("network_number"),
            "buildings": obj.get("buildings"),
            "devices": obj.get("devices"),
            "name": obj.get("name"),
            "status": obj.get("status"),
            "type": obj.get("type"),
            "latitude": obj.get("latitude"),
            "longitude": obj.get("longitude"),
            "altitude": obj.get("altitude"),
            "install_date": obj.get("install_date"),
            "abandon_date": obj.get("abandon_date"),
            "notes": obj.get("notes")
        })
        return _obj


