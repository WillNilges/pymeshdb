# coding: utf-8

"""
    MeshDB Data API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from pymeshdb.models.patched_install import PatchedInstall

class TestPatchedInstall(unittest.TestCase):
    """PatchedInstall unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PatchedInstall:
        """Test PatchedInstall
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PatchedInstall`
        """
        model = PatchedInstall()
        if include_optional:
            return PatchedInstall(
                id = '',
                request_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                install_fee_billing_datum = pymeshdb.models.install_install_fee_billing_datum.Install_install_fee_billing_datum(
                    id = '', ),
                install_number = 56,
                status = 'Request Received',
                ticket_number = '',
                install_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                abandon_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                unit = '',
                roof_access = True,
                referral = '',
                notes = '',
                diy = True,
                node = pymeshdb.models.install_node.Install_node(
                    id = '', 
                    network_number = -2147483648, ),
                building = pymeshdb.models.install_building.Install_building(
                    id = '', ),
                member = pymeshdb.models.install_member.Install_member(
                    id = '', ),
                additional_members = [
                    pymeshdb.models.install_additional_members_inner.Install_additional_members_inner(
                        id = '', )
                    ]
            )
        else:
            return PatchedInstall(
        )
        """

    def testPatchedInstall(self):
        """Test PatchedInstall"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
